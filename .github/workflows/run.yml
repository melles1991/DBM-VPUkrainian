name: Auto GitHub Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get version from .toc file
        id: get_version
        run: |
          # Отримуємо базову версію з .toc файлу (перші два числа версії)
          BASE_VERSION=$(grep -oP '^## Version: \K.*' DBM-VPUkrainian.toc | cut -d '.' -f1,2)
          # Отримуємо поточний номер збірки
          BUILD_NUMBER=${{ github.run_number }}  
          # Формуємо фінальну версію
          FINAL_VERSION="v${BASE_VERSION}.${BUILD_NUMBER}"
          
          echo "FINAL_VERSION=$FINAL_VERSION" >> $GITHUB_ENV  # Зберігаємо FINAL_VERSION у середовищі
          echo "version=$FINAL_VERSION" >> $GITHUB_OUTPUT
          echo "📦 Поточна версія з TOC: $BASE_VERSION"
          echo "Будівельний номер: $BUILD_NUMBER"
          echo "Нова версія (з номером збірки): $FINAL_VERSION"
          
      - name: Get previous tag (if any)
        id: get_latest
        run: |
          # Отримуємо попередній тег або встановлюємо початковий "v0.0.0" якщо тегів немає
          tag=$(git describe --tags --abbrev=0 2>/dev/null || echo ${{ steps.get_version.outputs.version }})
          echo "latest=$tag" >> $GITHUB_OUTPUT
          echo "Попередній тег: $tag"

      - name: Create Git tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          # Створюємо новий тег з FINAL_VERSION
          git tag ${{ steps.get_version.outputs.version }}
          git push origin ${{ steps.get_version.outputs.version }}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
